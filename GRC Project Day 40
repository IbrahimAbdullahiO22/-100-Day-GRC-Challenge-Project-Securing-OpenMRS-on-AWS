# 📅 Day 40 – Fitting OpenMRS into the Bigger IT Picture  
_100 Days of GRC • By Ibrahim Abdullahi_

---

##  No System Is an Island – Making OpenMRS a Team Player in the Enterprise

When I first started in IT support, I once watched a new application bring down half the network — not because it was malicious, but because it wasn’t designed with the *whole* system in mind. It had its own user directory, didn’t log activity where our SIEM could see it, and operated outside our normal backup process. That experience stuck with me.

Now, leading security and GRC discussions around OpenMRS, I make it a point to ask one core question:

> **“How does this system fit into the larger picture?”**

Today is about **enterprise architecture** – the blueprint that ensures all our tech works together to serve the mission efficiently, securely, and reliably.

---

##  Today’s Focus

- Understand enterprise architecture in simple terms  
- Identify the systems, services, and standards OpenMRS must align with  
- Ensure we avoid siloed deployments  
- Map how OpenMRS integrates into MyClinic’s AWS-based infrastructure  

---

##  Enterprise Architecture: The City Planning of IT

Think of our IT environment like a smart city. Every new application, like OpenMRS, is a new building – it must connect to the **roads (networks)**, **utilities (logging, security, backups)**, and **identity systems (SSO/LDAP)**. You wouldn’t put up a skyscraper without checking the zoning laws or where the power lines are – and the same goes for enterprise systems.

In my clinic scenario, OpenMRS doesn’t stand alone – it’s part of an AWS-based digital healthcare ecosystem.

---

##  Key Integration Points for OpenMRS

###  1. AWS Cloud Services

OpenMRS is deployed in **AWS**, with infrastructure like:

- **Amazon RDS** (for the database)  
- **EC2 instances** (for the application)  
- **S3 buckets** (for backups and storage)  
- **AWS WAF & Shield** (for perimeter protection)  
- **Route 53** (DNS management)

🛠 **Key Enterprise Action**: Make sure OpenMRS lives in the correct **VPC** and AWS account tied to MyClinic’s AWS Organizations structure — not some personal test account. This ensures proper monitoring, billing, access control, and governance.

---

###  2. Identity & Access Management

Does MyClinic use LDAP, Active Directory, or SSO (SAML or OAuth)? If yes, then **OpenMRS must plug into that.**

🎯 Why? Because:
- It simplifies user login (one identity across systems)  
- It centralizes account management and offboarding  
- It enforces **multi-factor authentication (MFA)** policy consistently  

🛠 **Key Enterprise Action**: Integrate OpenMRS with existing identity provider and enforce MFA and session timeout policies.

---

### 3. Data Interoperability

OpenMRS may need to **talk to other systems** such as:

- **Lab Information Systems (LIS)**  
- **Billing & Insurance Platforms**  
- **Pharmacy Management**  
- **Analytics Platforms or Data Warehouses**

Even if not implemented yet, designing OpenMRS with **API or HL7 integration potential** prevents painful rebuilds later.

🛠 **Key Enterprise Action**: Document potential data flows early. Plan for secure, standards-based integration, even if deferred.

---

### 📊 4. Logging, Monitoring & Backup

No modern enterprise app should log to a local file and call it a day.

🛠 **Key Enterprise Action**:
- Stream OpenMRS logs to centralized tools (e.g., **CloudWatch**, **Splunk**, **SIEM**)  
- Integrate with **central backup services** to enforce retention and encryption  
- Include OpenMRS in enterprise-wide **monitoring dashboards** for uptime and performance  

---

### 🧱 5. Technology Alignment

MyClinic might prefer **PostgreSQL**, but OpenMRS defaults to **MySQL**.  
MyClinic might deploy apps via **Kubernetes**, but OpenMRS is currently on EC2.

This is where **GRC meets architecture pragmatism**:

> Do we adapt the system, or allow an exception?

🛠 **Key Enterprise Action**: Document these architectural deviations and justify them based on technical feasibility and business need. Avoid tech sprawl when possible, but don’t force a square peg into a round hole.

---

##  Architecture at a Glance

Let’s revisit the high-level diagram from earlier:

[Clinic Users] ---> Route53 ---> AWS WAF & Shield ---> OpenMRS (EC2 in Private Subnet)
|
Amazon RDS (MySQL)
|
Backups --> S3


All components are in the **same AWS architecture** used by other systems, monitored centrally, protected at the perimeter, and integrated with shared enterprise services.

---

## 🔎 Reflection

**Why does this matter?**

Because *rogue IT* leads to:

- Unmonitored vulnerabilities  
- Duplicate systems with inconsistent data  
- Painful audits and security blind spots  
- Lack of resilience when something goes wrong  

I’ve seen organizations scramble because no one knew where a critical system’s logs were stored. Or worse, because no one *owned* it. Aligning OpenMRS to enterprise architecture prevents that.

---

## ✍️ Hands-On Recap

Here’s how I mapped OpenMRS to MyClinic’s ecosystem:

-  **Authentication**: LDAP/SSO via SAML  
-  **Data Sharing**: Future integration with LIS via API  
-  **Backups**: Daily to S3, encrypted, monitored  
-  **Logging**: Stream to centralized SIEM  
-  **Network**: Private subnet in multi-AZ VPC  
-  **Standards**: Follows MyClinic’s AWS hardening guide  

---

## 🔮 Tomorrow’s Insight: Who Does What?

We’ll now allocate these requirements across stakeholders. Which ones are AWS’s job (e.g., data center security), and which ones are ours (e.g., application configuration, access control)? This is called **Requirements Allocation**, and it’s how we avoid saying “I thought *they* were doing it.”

---

## 📚 Explore More:

- “Enterprise architecture integration security”  
- “OpenMRS system integration example”  
- “AWS reference architecture for healthcare”  
- “SSO and centralized logging for cloud apps”

---

📌 #Day40 #EnterpriseArchitecture #HealthcareIT #OpenMRS #SystemIntegration #AWS #100DaysOfGRC #IbrahimAbdullahi #SecurityArchitecture


